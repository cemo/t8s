#cloud-config

---
coreos:

  locksmith:
    endpoint: https://etcd.${ internal-tld }:2379
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem
    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem

  flannel:
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/k8s-worker.pem
    etcd_endpoints: https://etcd.${ internal-tld }:2379
    etcd_keyfile: /etc/kubernetes/ssl/k8s-worker-key.pem

  units:
    - name: etcd-member.service
      command: start
      drop-ins:

        - name: 10-environment.conf
          content: |
            [Service]
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            Environment="ETCD_CERT_FILE=/etc/ssl/certs/k8s-worker.pem"
            Environment="ETCD_CLIENT_CERT_AUTH=TRUE"
            Environment="ETCD_DISCOVERY_SRV=${ internal-tld }"
            Environment="ETCD_KEY_FILE=/etc/ssl/certs/k8s-worker-key.pem"
            Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-worker.pem"
            Environment="ETCD_PEER_CLIENT_AUTH=true"
            Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-worker-key.pem"
            Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem"
            Environment="ETCD_PROXY=on"
            Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem"

    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        [Service]
        ExecStart=/usr/sbin/wipefs -f /dev/xvdf
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdf
        RemainAfterExit=yes
        Type=oneshot

    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            EnvironmentFile=-/etc/environment
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            Restart=always
            RestartSec=10

    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            After=flanneld.service
            Requires=flanneld.service
            [Service]
            Restart=always
            RestartSec=10

    - name: prefetch-rkt-hyperkube.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Requires=network-online.target
        Description=Prefetch rkt Hyperkube
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube
        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }

    - name: prefetch-docker-hyperkube.service
      command: start
      content: |
        [Unit]
        After=docker.service
        Requires=docker.service
        Description=Prefetch docker Hyperkube
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/docker pull ${ hyperkube-image }:${ hyperkube-tag }

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper
        ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker.pem
        ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker-key.pem
        After=flanneld.service
        After=prefetch-rkt-hyperkube.service
        After=prefetch-docker-hyperkube.service
        Requires=flanneld.service
        [Service]
        EnvironmentFile=/etc/environment
        Environment="KUBELET_ACI=${ hyperkube-image }"
        Environment="KUBELET_VERSION=${ hyperkube-tag }"
        Environment="RKT_OPTS=\
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume rkt,kind=host,source=/opt/bin/host-rkt \
          --mount volume=rkt,target=/usr/bin/rkt \
          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \
          --mount volume=var-lib-rkt,target=/var/lib/rkt \
          --volume stage,kind=host,source=/tmp \
          --mount volume=stage,target=/tmp \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/opt/bin/wait-for-apiserver
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged=true \
          --api-servers=https://master.${ internal-tld } \
          --cert-dir=/etc/kubernetes/ssl \
          --cloud-provider=aws \
          --cluster-dns=${ dns-service-ip } \
          --cluster-domain=${ cluster-domain } \
          --kubeconfig=/etc/kubernetes/kubeconfig.yml \
          --node-labels node-role.kubernetes.io/node \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --register-node=true \
          --tls-cert-file=/etc/kubernetes/ssl/k8s-worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/k8s-worker-key.pem
        Restart=always
        RestartSec=14
        [Install]
        WantedBy=multi-user.target

  update:
    reboot-strategy: etcd-lock

write-files:
  - path: /etc/kubernetes/ssl/ca.pem
    content: ${ ca-pem }
    permissions: '0644'
    encoding: base64

  - path: /etc/kubernetes/ssl/k8s-worker-key.pem
    content: ${ worker-key }
    encoding: base64
    permissions: '0644'
    owner: root

  - path: /etc/kubernetes/ssl/k8s-worker.pem
    content: ${ worker-pem }
    permissions: '0644'
    encoding: base64

  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem
      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-worker.pem
      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-worker-key.pem
      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem
      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-worker.pem
      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-worker-key.pem

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

  - path: /etc/kubernetes/kubeconfig.yml
    content: |
      apiVersion: v1
      kind: Config
      clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
            server: https://master.${ internal-tld }
      users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/k8s-worker.pem
            client-key: /etc/kubernetes/ssl/k8s-worker-key.pem
      contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
      current-context: kubelet-context

  - path: /etc/kubernetes/manifests/kube-proxy.yml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: ${ hyperkube-image }:${ hyperkube-tag }
          command:
          - /hyperkube
          - proxy
          - --kubeconfig=/etc/kubernetes/kubeconfig.yml
          - --master=https://master.${ internal-tld }
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: "ssl-certs"
            - mountPath: /etc/kubernetes/kubeconfig.yml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/kubernetes/ssl
              name: "etc-kube-ssl"
              readOnly: true
            - mountPath: /var/run/dbus
              name: dbus
              readOnly: false
        volumes:
          - name: "ssl-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/kubeconfig.yml"
          - name: "etc-kube-ssl"
            hostPath:
              path: "/etc/kubernetes/ssl"
          - name: dbus
            hostPath:
              path: "/var/run/dbus"


  - path: /etc/logrotate.d/docker-containers
    content: |
      /var/lib/docker/containers/*/*.log {
        rotate 7
        daily
        compress
        size=1M
        missingok
        delaycompress
        copytruncate
      }

  - path: /opt/bin/fetch-from-s3
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -e
      until /usr/bin/rkt run \
        --net=host \
        --trust-keys-from-https \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \
        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl
      do
        echo "retrying"
        sleep 5.2
      done
      echo "✓"

  - path: /opt/bin/wait-for-apiserver
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -e
      until curl --insecure https://master.${ internal-tld }/ &>/dev/null
      do
        echo "waiting for apiserver..."
        sleep 5.2
      done
      echo "✓"

  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    content: |
        {
            "name": "podnet",
            "type": "flannel",
            "delegate": {
                "isDefaultGateway": true
            }
        }
